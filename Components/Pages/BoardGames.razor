@page "/boardgames"
@using Microsoft.EntityFrameworkCore
@inject InventoryDbContext DbContext
@inject IDialogService DialogService

<PageTitle>Board Games</PageTitle>

<h3>Board Games (@boardGames.Count)</h3>

<hr>
<input placeholder="Board game name" @bind="newBoardGame.Name" />
<button @onclick="AddBoardGame">Add board game</button>
<hr>

@if (boardGames == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Rating</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var boardGame in boardGames)
            {
                <tr>
                    <td>@boardGame.Name</td>
                    <td>@boardGame.Description</td>
                    <td>@boardGame.Rating/@maxRating</td>
                    <td><button @onclick="@((e) => EditBoardGameDialog(boardGame))">Edit</button></td>
                    <td><button @onclick="@((e) => DeleteBoardGame(boardGame))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private int minRating, maxRating;
    private List<BoardGame> boardGames = new();
    private BoardGame newBoardGame = new();
    protected override async Task OnInitializedAsync()
    {
        minRating = ValidationHelper.GetMinRange<BoardGame>("Rating");
        maxRating = ValidationHelper.GetMaxRange<BoardGame>("Rating");
	    boardGames = await DbContext.BoardGames.ToListAsync();
    }

    private async void AddBoardGame()
    {
	    if (!string.IsNullOrWhiteSpace(newBoardGame.Name))
	    {
	        DbContext.BoardGames.Add(newBoardGame);
	        await DbContext.SaveChangesAsync();
	        boardGames = await DbContext.BoardGames.ToListAsync();
	        newBoardGame = new BoardGame();
	    }
    }
    private async Task EditBoardGameDialog(BoardGame boardGame) {
        var options = new DialogOptions { CloseOnEscapeKey = true};
        var parameters = new DialogParameters<EditBoardGame> { { x => x.BoardGame, boardGame }};

        var dialog = await DialogService.ShowAsync<EditBoardGame>("Edit", parameters, options);
        var result = await dialog.Result;  
        if (!result.Canceled)
        { 
            UpdateBoardGame((BoardGame)result.Data);
        }
    } 

    private async Task UpdateBoardGame(BoardGame boardGame)
    {
        DbContext.BoardGames.Update(boardGame);
        await DbContext.SaveChangesAsync();
    }

    private async Task DeleteBoardGame(BoardGame boardGame)
    {
        DbContext.BoardGames.Remove(boardGame);
        await DbContext.SaveChangesAsync();
        boardGames = await DbContext.BoardGames.ToListAsync();
    }
}